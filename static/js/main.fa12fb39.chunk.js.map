{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","networked-scene","id","movement-controls","position","camera","look-controls","rotation","color","radius","height","width","graph","type","data","dataFile","fileType","fieldDesc","style","origin","dimensions","depth","mark","x","scaleType","field","y","z","fill","opacity","stroke","axis","orient","ticks","noOfTicks","size","fontSize","grid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","body"],"mappings":"8OAuIeA,MAnIf,WACE,OACE,0BACEC,kBAAgB,yCADlB,UAME,0BAAUC,GAAG,MAAMC,qBAAA,EAAkBC,SAAS,UAA9C,SACE,0BACEC,QAAM,EACND,SAAS,SACTE,gBAAc,+BAIlB,uBAAOF,SAAS,YAAYG,SAAS,SAASC,MAAM,YACpD,0BAAUJ,SAAS,YAAYK,OAAO,OAAOD,MAAM,YACnD,4BACEJ,SAAS,YACTK,OAAO,MACPC,OAAO,MACPF,MAAM,YAER,yBACEJ,SAAS,SACTG,SAAS,UACTI,MAAM,IACND,OAAO,IACPF,MAAM,YAER,2BAGA,cAAC,IAAD,CACEI,MAAO,CACL,CACEC,KAAM,aACNC,KAAM,CACJC,SAAU,sCACVC,SAAU,MACVC,UAAW,CACT,CAAC,CAAC,OAAQ,OAAQ,eAClB,CAAC,CAAC,oBAAqB,aAK3BC,MAAO,CACLC,OAAQ,CAAC,EAAG,EAAG,GACfC,WAAY,CACVT,MAAO,GACPD,OAAQ,IACRW,MAAO,KAGXC,KAAM,CACJlB,SAAU,CACRmB,EAAG,CACDC,UAAW,UACXC,MAAO,QAETC,EAAG,CACDD,MAAO,qBAETE,EAAG,CACDF,MAAO,sBAGXP,MAAO,CACLU,KAAM,CACJpB,MAAO,MACPqB,QAAS,IAEXC,OAAQ,CACNnB,MAAO,EACPH,MAAO,WAIbuB,KAAM,CACJ,SAAU,CACRC,OAAQ,cACRC,MAAO,CACLC,UAAW,GACXC,KAAM,IACN3B,MAAO,QACPqB,QAAS,GACTO,SAAU,GAEZC,KAAM,CACJ7B,MAAO,QACPqB,QAAS,KAGb,SAAU,CACRG,OAAQ,YACRC,MAAO,CACLC,UAAW,IACXC,KAAM,EACN3B,MAAO,QACPqB,QAAS,GACTO,SAAU,IAEZC,KAAM,CACJ7B,MAAO,QACPqB,QAAS,KAGb,SAAU,CACRG,OAAQ,cACRC,MAAO,CACLC,UAAW,GACXC,KAAM,IACN3B,MAAO,QACPqB,QAAS,GACTO,SAAU,GAEZC,KAAM,CACJ7B,MAAO,QACPqB,QAAS,cChHZS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,MAMXb,M","file":"static/js/main.fa12fb39.chunk.js","sourcesContent":["import VRViz from \"vr-viz\";\nimport \"aframe\";\nimport \"aframe-extras\";\n\nfunction App() {\n  return (\n    <a-scene\n      networked-scene=\"\n    app: myApp;\n    room: room1;\n    debug: true;\"\n    >\n      <a-entity id=\"rig\" movement-controls position=\"25 0 25\">\n        <a-entity\n          camera\n          position=\"0 40 0\"\n          look-controls=\"pointerLockEnabled: true\"\n        ></a-entity>\n      </a-entity>\n         \n      <a-box position=\"-1 0.5 -3\" rotation=\"0 45 0\" color=\"#4CC3D9\"></a-box>\n      <a-sphere position=\"0 1.25 -5\" radius=\"1.25\" color=\"#EF2D5E\"></a-sphere>\n      <a-cylinder\n        position=\"1 0.75 -3\"\n        radius=\"0.5\"\n        height=\"1.5\"\n        color=\"#FFC65D\"\n      ></a-cylinder>\n      <a-plane\n        position=\"0 0 -4\"\n        rotation=\"-90 0 0\"\n        width=\"4\"\n        height=\"4\"\n        color=\"#7BC8A4\"\n      ></a-plane>\n      <a-grid></a-grid>\n\n      {/* <a-sky color=\"#a9a9a9\"></a-sky> */}\n      <VRViz\n        graph={[\n          {\n            type: \"TimeSeries\",\n            data: {\n              dataFile: \"covid_impact_on_airport_traffic.csv\",\n              fileType: \"csv\",\n              fieldDesc: [\n                [[\"Date\", \"date\", \"YYYY-MM-DD\"]],\n                [[\"PercentOfBaseline\", \"number\"]],\n                // [[\"ActualElapsedTime\", \"number\"]],\n                // [[\"LateAircraftDelay\", \"number\"]],\n              ],\n            },\n            style: {\n              origin: [0, 0, 0],\n              dimensions: {\n                width: 20,\n                height: 100,\n                depth: 10,\n              },\n            },\n            mark: {\n              position: {\n                x: {\n                  scaleType: \"ordinal\",\n                  field: \"Date\",\n                },\n                y: {\n                  field: \"PercentOfBaseline\",\n                },\n                z: {\n                  field: \"PercentOfBaseline\",\n                },\n              },\n              style: {\n                fill: {\n                  color: \"red\",\n                  opacity: 0.4,\n                },\n                stroke: {\n                  width: 1,\n                  color: \"black\",\n                },\n              },\n            },\n            axis: {\n              \"x-axis\": {\n                orient: \"back-bottom\",\n                ticks: {\n                  noOfTicks: 10,\n                  size: 0.01,\n                  color: \"white\",\n                  opacity: 0.7,\n                  fontSize: 3,\n                },\n                grid: {\n                  color: \"white\",\n                  opacity: 0.7,\n                },\n              },\n              \"y-axis\": {\n                orient: \"back-left\",\n                ticks: {\n                  noOfTicks: 100,\n                  size: 1,\n                  color: \"white\",\n                  opacity: 0.7,\n                  fontSize: 10,\n                },\n                grid: {\n                  color: \"white\",\n                  opacity: 0.7,\n                },\n              },\n              \"z-axis\": {\n                orient: \"bottom-left\",\n                ticks: {\n                  noOfTicks: 10,\n                  size: 0.01,\n                  color: \"white\",\n                  opacity: 0.7,\n                  fontSize: 3,\n                },\n                grid: {\n                  color: \"white\",\n                  opacity: 0.7,\n                },\n              },\n            },\n          },\n        ]}\n      />\n    </a-scene>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.body\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}